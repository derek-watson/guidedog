var through = require("through2"),
	gutil = require("gulp-util"),
	h = require("handlebars"),
	path = require("path");

function listAllProperties(o){     
	var objectToInspect;     
	var result = [];
	
	for(objectToInspect = o; objectToInspect !== null; objectToInspect = Object.getPrototypeOf(objectToInspect)){  
		result = result.concat(Object.getOwnPropertyNames(objectToInspect));  
	}
	
	return result; 
}

module.exports = function (param) {
	"use strict";

	// if necessary check for required param(s), e.g. options hash, etc.
	// if (!param) {
	// 	throw new gutil.PluginError("gulp-hanlebars", "No param supplied");
	// }

	// see "Writing a plugin"
	// https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/README.md
	function hanlebars(file, enc, callback) {

		// Do nothing if no contents
		if (file.isNull()) {
			this.push(file);
			return callback();
		}

		if (file.isStream()) {

			// http://nodejs.org/api/stream.html
			// http://nodejs.org/api/child_process.html
			// https://github.com/dominictarr/event-stream

			// accepting streams is optional
			this.emit("error",
				new gutil.PluginError("gulp-hanlebars-michael", "Stream content is not supported"));
			return callback();
		}

		// check if file.contents is a `Buffer`
		if (file.isBuffer()) {

			// manipulate buffer in some way
			// http://nodejs.org/api/buffer.html

			var template = path.basename(file.path, '.handlebars');			

			var output = [];
			output.push('(function() {\n');
			output.push('  var template = Handlebars.template, templates = Handlebars.templates || ');
			output.push('{};\n');
			output.push('templates[\'' + template + '\'] = template(' + h.precompile(String(file.contents)) + ');\n');
			output.push('})();');
			output = output.join('');


			file.contents = new Buffer(output);

			this.push(file);

		}
		return callback();
	}

	return through.obj(hanlebars);
};
